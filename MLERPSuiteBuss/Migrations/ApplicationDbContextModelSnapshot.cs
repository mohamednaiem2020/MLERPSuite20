// <auto-generated />
using System;
using MLERPSuiteBuss.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MLERPSuiteBuss.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminActor", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.HasKey("TenantId", "ActorId");

                    b.ToTable("AdminActor");

                    b.HasData(
                        new
                        {
                            TenantId = 1,
                            ActorId = 1
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminChart", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("ChartId")
                        .HasColumnType("int");

                    b.Property<string>("ChartCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("ChartIsLeaf")
                        .HasColumnType("tinyint");

                    b.Property<int>("ChartLevelId")
                        .HasColumnType("int");

                    b.Property<int>("ChartLevelId1")
                        .HasColumnType("int");

                    b.Property<int>("ChartLevelId2")
                        .HasColumnType("int");

                    b.Property<int>("ChartLevelId3")
                        .HasColumnType("int");

                    b.Property<int>("ChartLevelId4")
                        .HasColumnType("int");

                    b.Property<int>("ChartLevelId5")
                        .HasColumnType("int");

                    b.Property<int>("ChartLevelId6")
                        .HasColumnType("int");

                    b.Property<int?>("ChartParentId")
                        .HasColumnType("int");

                    b.Property<string>("ChartRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("TenantId", "ChartId");

                    b.HasIndex("TenantId", "ChartLevelId");

                    b.HasIndex("TenantId", "ChartParentId");

                    b.ToTable("AdminChart");

                    b.HasData(
                        new
                        {
                            TenantId = 1,
                            ChartId = 1,
                            ChartCode = "1",
                            ChartIsLeaf = (byte)0,
                            ChartLevelId = 1,
                            ChartLevelId1 = 1,
                            ChartLevelId2 = 0,
                            ChartLevelId3 = 0,
                            ChartLevelId4 = 0,
                            ChartLevelId5 = 0,
                            ChartLevelId6 = 0,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 9, 21, 14, 32, 21, 339, DateTimeKind.Local).AddTicks(2698),
                            EditedBy = 1,
                            EditedDate = new DateTime(2020, 9, 21, 14, 32, 21, 339, DateTimeKind.Local).AddTicks(3513),
                            NoteId = 0
                        },
                        new
                        {
                            TenantId = 1,
                            ChartId = 2,
                            ChartCode = "2",
                            ChartIsLeaf = (byte)1,
                            ChartLevelId = 2,
                            ChartLevelId1 = 1,
                            ChartLevelId2 = 2,
                            ChartLevelId3 = 0,
                            ChartLevelId4 = 0,
                            ChartLevelId5 = 0,
                            ChartLevelId6 = 0,
                            ChartParentId = 1,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 9, 21, 14, 32, 21, 339, DateTimeKind.Local).AddTicks(4826),
                            EditedBy = 1,
                            EditedDate = new DateTime(2020, 9, 21, 14, 32, 21, 339, DateTimeKind.Local).AddTicks(4845),
                            NoteId = 0
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminChartLevel", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("ChartLevelId")
                        .HasColumnType("int");

                    b.Property<byte>("ChartCodeLength")
                        .HasColumnType("tinyint");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("datetime");

                    b.HasKey("TenantId", "ChartLevelId");

                    b.ToTable("AdminChartLevel");

                    b.HasData(
                        new
                        {
                            TenantId = 1,
                            ChartLevelId = 1,
                            ChartCodeLength = (byte)1,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 9, 21, 14, 32, 21, 338, DateTimeKind.Local).AddTicks(496),
                            EditedBy = 1,
                            EditedDate = new DateTime(2020, 9, 21, 14, 32, 21, 338, DateTimeKind.Local).AddTicks(8985)
                        },
                        new
                        {
                            TenantId = 1,
                            ChartLevelId = 2,
                            ChartCodeLength = (byte)1,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 9, 21, 14, 32, 21, 338, DateTimeKind.Local).AddTicks(9487),
                            EditedBy = 1,
                            EditedDate = new DateTime(2020, 9, 21, 14, 32, 21, 338, DateTimeKind.Local).AddTicks(9524)
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminCoding", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<string>("CurrentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberLength")
                        .HasColumnType("int");

                    b.Property<string>("PrefixCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SplitCharcter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WithLocation")
                        .HasColumnType("int");

                    b.Property<int>("WithMonthYear")
                        .HasColumnType("int");

                    b.Property<int>("WithPrefix")
                        .HasColumnType("int");

                    b.Property<int>("WorkFlowId")
                        .HasColumnType("int");

                    b.HasKey("TenantId", "DocumentId");

                    b.HasIndex("WorkFlowId");

                    b.HasIndex("TenantId", "WorkFlowId", "DocumentId");

                    b.ToTable("AdminCoding");

                    b.HasData(
                        new
                        {
                            TenantId = 1,
                            DocumentId = 10101001,
                            CurrentNumber = "00000",
                            NumberLength = 6,
                            PrefixCode = "Inv",
                            SplitCharcter = "-",
                            WithLocation = 1,
                            WithMonthYear = 1,
                            WithPrefix = 1,
                            WorkFlowId = 10101
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminCountry", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.HasKey("TenantId", "CountryId");

                    b.ToTable("AdminCountry");

                    b.HasData(
                        new
                        {
                            TenantId = 1,
                            CountryId = 1
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminCurrency", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("DigitCount")
                        .HasColumnType("tinyint");

                    b.Property<int>("EditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("IsLocalCurrency")
                        .HasColumnType("tinyint");

                    b.HasKey("TenantId", "CurrencyId");

                    b.ToTable("AdminCurrency");

                    b.HasData(
                        new
                        {
                            TenantId = 1,
                            CurrencyId = 1,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 9, 21, 14, 32, 21, 339, DateTimeKind.Local).AddTicks(7582),
                            CurrencyCode = "KWD",
                            DigitCount = (byte)3,
                            EditedBy = 1,
                            EditedDate = new DateTime(2020, 9, 21, 14, 32, 21, 339, DateTimeKind.Local).AddTicks(8330),
                            IsLocalCurrency = (byte)1
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminLanguage", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("IsRightToLeft")
                        .HasColumnType("int");

                    b.Property<string>("LanguageDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageId");

                    b.ToTable("AdminLanguage");

                    b.HasData(
                        new
                        {
                            LanguageId = 1,
                            IsRightToLeft = 0,
                            LanguageDescription = "English"
                        },
                        new
                        {
                            LanguageId = 2,
                            IsRightToLeft = 1,
                            LanguageDescription = "عربي"
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminModule", b =>
                {
                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<byte>("IsDisabled")
                        .HasColumnType("tinyint");

                    b.Property<string>("ModuleCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModuleIcon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModuleOrder")
                        .HasColumnType("int");

                    b.Property<string>("ModuleURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Records3DigitsPrefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ModuleId");

                    b.ToTable("AdminModule");

                    b.HasData(
                        new
                        {
                            ModuleId = 100,
                            IsDisabled = (byte)0,
                            ModuleCode = "100",
                            ModuleIcon = "",
                            ModuleOrder = 1,
                            ModuleURL = "",
                            Records3DigitsPrefix = "100"
                        },
                        new
                        {
                            ModuleId = 101,
                            IsDisabled = (byte)0,
                            ModuleCode = "101",
                            ModuleIcon = "",
                            ModuleOrder = 1,
                            ModuleURL = "",
                            Records3DigitsPrefix = "101"
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminModuleScreen", b =>
                {
                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("ScreenId")
                        .HasColumnType("int");

                    b.HasKey("ModuleId", "ScreenId");

                    b.HasIndex("ScreenId");

                    b.ToTable("AdminModuleScreen");

                    b.HasData(
                        new
                        {
                            ModuleId = 101,
                            ScreenId = 10101001
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminNationality", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("IsLocalNationality")
                        .HasColumnType("tinyint");

                    b.Property<string>("NationalityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TenantId", "NationalityId");

                    b.ToTable("AdminNationality");
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminNotes", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.Property<string>("NoteDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TenantId", "NoteId");

                    b.ToTable("AdminNotes");
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminObject", b =>
                {
                    b.Property<int>("ObjectId")
                        .HasColumnType("int");

                    b.Property<byte>("IsFixedList")
                        .HasColumnType("tinyint");

                    b.Property<string>("ObjectDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ObjectId");

                    b.ToTable("AdminObject");

                    b.HasData(
                        new
                        {
                            ObjectId = 10000001,
                            IsFixedList = (byte)1,
                            ObjectDescription = "Package name"
                        },
                        new
                        {
                            ObjectId = 10000002,
                            IsFixedList = (byte)1,
                            ObjectDescription = "Package description"
                        },
                        new
                        {
                            ObjectId = 10000003,
                            IsFixedList = (byte)1,
                            ObjectDescription = "Module"
                        },
                        new
                        {
                            ObjectId = 10000004,
                            IsFixedList = (byte)1,
                            ObjectDescription = "Right"
                        },
                        new
                        {
                            ObjectId = 10000005,
                            IsFixedList = (byte)1,
                            ObjectDescription = "Screen level"
                        },
                        new
                        {
                            ObjectId = 10000006,
                            IsFixedList = (byte)1,
                            ObjectDescription = "Screen"
                        },
                        new
                        {
                            ObjectId = 10000007,
                            IsFixedList = (byte)1,
                            ObjectDescription = "Workflow master"
                        },
                        new
                        {
                            ObjectId = 10000008,
                            IsFixedList = (byte)1,
                            ObjectDescription = "Step Status"
                        },
                        new
                        {
                            ObjectId = 10000009,
                            IsFixedList = (byte)1,
                            ObjectDescription = "Trans Status"
                        },
                        new
                        {
                            ObjectId = 10000010,
                            IsFixedList = (byte)0,
                            ObjectDescription = "Document"
                        },
                        new
                        {
                            ObjectId = 10100001,
                            IsFixedList = (byte)1,
                            ObjectDescription = "Return type"
                        },
                        new
                        {
                            ObjectId = 10100002,
                            IsFixedList = (byte)1,
                            ObjectDescription = "Sales type"
                        },
                        new
                        {
                            ObjectId = 10100003,
                            IsFixedList = (byte)0,
                            ObjectDescription = "Customer"
                        },
                        new
                        {
                            ObjectId = 10100004,
                            IsFixedList = (byte)0,
                            ObjectDescription = "Item"
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminObjectLanguage", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("ObjectId")
                        .HasColumnType("int");

                    b.Property<int>("RowId")
                        .HasColumnType("int");

                    b.Property<string>("RowDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TenantId", "LanguageId", "ObjectId", "RowId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ObjectId");

                    b.ToTable("AdminObjectLanguage");

                    b.HasData(
                        new
                        {
                            TenantId = 1,
                            LanguageId = 1,
                            ObjectId = 10100002,
                            RowId = 1,
                            RowDescription = "Sales Invoice"
                        },
                        new
                        {
                            TenantId = 1,
                            LanguageId = 1,
                            ObjectId = 10000010,
                            RowId = 10101001,
                            RowDescription = "Sales Invoice"
                        },
                        new
                        {
                            TenantId = 1,
                            LanguageId = 1,
                            ObjectId = 10100003,
                            RowId = 1,
                            RowDescription = "Sadia"
                        },
                        new
                        {
                            TenantId = 1,
                            LanguageId = 1,
                            ObjectId = 10100004,
                            RowId = 1,
                            RowDescription = "Sadia chickent 12 pc"
                        },
                        new
                        {
                            TenantId = 1,
                            LanguageId = 1,
                            ObjectId = 10100004,
                            RowId = 2,
                            RowDescription = "Sadia burger 12 pc"
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminPackage", b =>
                {
                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<int>("DemoForMonthCount")
                        .HasColumnType("int");

                    b.Property<byte>("IsFree")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("PackageMonthlyPrice")
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("PackageYearlyPrice")
                        .HasColumnType("decimal(18,3)");

                    b.HasKey("PackageId");

                    b.ToTable("AdminPackage");
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminPackageModule", b =>
                {
                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.HasKey("PackageId", "ModuleId");

                    b.HasIndex("ModuleId");

                    b.ToTable("AdminPackageModule");
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminProvince", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.HasKey("TenantId", "ProvinceId");

                    b.HasIndex("TenantId", "CountryId");

                    b.ToTable("AdminProvince");

                    b.HasData(
                        new
                        {
                            TenantId = 1,
                            ProvinceId = 1,
                            CountryId = 1
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminRight", b =>
                {
                    b.Property<int>("RightId")
                        .HasColumnType("int");

                    b.HasKey("RightId");

                    b.ToTable("AdminRight");

                    b.HasData(
                        new
                        {
                            RightId = 10101001
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminScreen", b =>
                {
                    b.Property<int>("ScreenId")
                        .HasColumnType("int");

                    b.Property<byte>("IsDisabled")
                        .HasColumnType("tinyint");

                    b.Property<int?>("RightId")
                        .HasColumnType("int");

                    b.Property<string>("ScreenIcon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("ScreenIsLeaf")
                        .HasColumnType("tinyint");

                    b.Property<int>("ScreenLevelId")
                        .HasColumnType("int");

                    b.Property<int>("ScreenLevelId1")
                        .HasColumnType("int");

                    b.Property<int>("ScreenLevelId2")
                        .HasColumnType("int");

                    b.Property<int>("ScreenLevelId3")
                        .HasColumnType("int");

                    b.Property<int>("ScreenLevelId4")
                        .HasColumnType("int");

                    b.Property<string>("ScreenMode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScreenOrder")
                        .HasColumnType("int");

                    b.Property<int?>("ScreenParentId")
                        .HasColumnType("int");

                    b.Property<string>("ScreenURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScreenId");

                    b.HasIndex("RightId");

                    b.HasIndex("ScreenLevelId");

                    b.HasIndex("ScreenParentId");

                    b.ToTable("AdminScreen");

                    b.HasData(
                        new
                        {
                            ScreenId = 10101000,
                            IsDisabled = (byte)0,
                            ScreenIcon = "",
                            ScreenIsLeaf = (byte)0,
                            ScreenLevelId = 1,
                            ScreenLevelId1 = 10101000,
                            ScreenLevelId2 = 0,
                            ScreenLevelId3 = 0,
                            ScreenLevelId4 = 0,
                            ScreenOrder = 1,
                            ScreenURL = ""
                        },
                        new
                        {
                            ScreenId = 10101001,
                            IsDisabled = (byte)0,
                            RightId = 10101001,
                            ScreenIcon = "",
                            ScreenIsLeaf = (byte)1,
                            ScreenLevelId = 1,
                            ScreenLevelId1 = 10101000,
                            ScreenLevelId2 = 10101001,
                            ScreenLevelId3 = 0,
                            ScreenLevelId4 = 0,
                            ScreenOrder = 2,
                            ScreenParentId = 10101000,
                            ScreenURL = ""
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminScreenLanguage", b =>
                {
                    b.Property<int>("ScreenId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LabelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScreenId", "LanguageId", "LabelId");

                    b.HasIndex("LanguageId");

                    b.ToTable("AdminScreenLanguage");
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminScreenLevel", b =>
                {
                    b.Property<int>("ScreenLevelId")
                        .HasColumnType("int");

                    b.HasKey("ScreenLevelId");

                    b.ToTable("AdminScreenLevel");

                    b.HasData(
                        new
                        {
                            ScreenLevelId = 1
                        },
                        new
                        {
                            ScreenLevelId = 2
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("TenantDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TenantId");

                    b.ToTable("AdminTenant");

                    b.HasData(
                        new
                        {
                            TenantId = 1,
                            TenantDescription = "first client"
                        },
                        new
                        {
                            TenantId = 2,
                            TenantDescription = "second client"
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenantLanguage", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("datetime");

                    b.HasKey("TenantId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("AdminTenantLanguage");
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenantPackage", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<decimal>("LastPrice")
                        .HasColumnType("decimal(18,3)");

                    b.HasKey("TenantId", "PackageId");

                    b.HasIndex("PackageId");

                    b.ToTable("AdminTenantPackage");
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTown", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("TenantId", "TownId");

                    b.HasIndex("TenantId", "ProvinceId");

                    b.ToTable("AdminTown");

                    b.HasData(
                        new
                        {
                            TenantId = 1,
                            TownId = 1,
                            ProvinceId = 1
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminUser", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ChartId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("IsAdmin")
                        .HasColumnType("tinyint");

                    b.Property<byte>("IsDisabled")
                        .HasColumnType("tinyint");

                    b.Property<string>("LoginUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TenantId", "UserId");

                    b.HasIndex("TenantId", "ChartId");

                    b.ToTable("AdminUser");

                    b.HasData(
                        new
                        {
                            TenantId = 1,
                            UserId = 1,
                            ChartId = 2,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 9, 21, 14, 32, 21, 340, DateTimeKind.Local).AddTicks(8671),
                            EditedBy = 1,
                            EditedDate = new DateTime(2020, 9, 21, 14, 32, 21, 340, DateTimeKind.Local).AddTicks(9417),
                            IsAdmin = (byte)0,
                            IsDisabled = (byte)0,
                            LoginUserName = "Mohamed",
                            NoteId = 0,
                            Password = "111",
                            UserFullName = "Mohamed"
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminWFDocument", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("WorkFlowId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<byte>("IsDisabled")
                        .HasColumnType("tinyint");

                    b.HasKey("TenantId", "WorkFlowId", "DocumentId");

                    b.HasIndex("WorkFlowId");

                    b.ToTable("AdminWFDocument");

                    b.HasData(
                        new
                        {
                            TenantId = 1,
                            WorkFlowId = 10101,
                            DocumentId = 10101001,
                            IsDisabled = (byte)1
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminWFMaster", b =>
                {
                    b.Property<int>("WorkFlowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("ScreenId")
                        .HasColumnType("int");

                    b.HasKey("WorkFlowId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("ScreenId");

                    b.ToTable("AdminWFMaster");

                    b.HasData(
                        new
                        {
                            WorkFlowId = 10101,
                            ModuleId = 101,
                            ScreenId = 10101001
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminWFProcess", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("StepId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("HeaderGuidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StepStatusId")
                        .HasColumnType("int");

                    b.Property<int>("TransStatusId")
                        .HasColumnType("int");

                    b.HasKey("TenantId", "StepId", "TransactionId");

                    b.HasIndex("StepStatusId");

                    b.ToTable("AdminWFProcess");
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminWFStep", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("StepId")
                        .HasColumnType("int");

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<byte>("IsFirstStep")
                        .HasColumnType("tinyint");

                    b.Property<int?>("NextStepId")
                        .HasColumnType("int");

                    b.Property<int>("WorkFlowId")
                        .HasColumnType("int");

                    b.HasKey("TenantId", "StepId");

                    b.HasIndex("WorkFlowId");

                    b.HasIndex("TenantId", "ActorId");

                    b.HasIndex("TenantId", "NextStepId");

                    b.HasIndex("TenantId", "WorkFlowId", "DocumentId");

                    b.ToTable("AdminWFStep");

                    b.HasData(
                        new
                        {
                            TenantId = 1,
                            StepId = 10101001,
                            ActorId = 1,
                            IsFirstStep = (byte)1,
                            WorkFlowId = 10101
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminWFStepStatus", b =>
                {
                    b.Property<int>("StepStatusId")
                        .HasColumnType("int");

                    b.HasKey("StepStatusId");

                    b.ToTable("AdminWFStepStatus");
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminWFTransList", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("WorkFlowId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentTransId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("EditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ErrorId")
                        .HasColumnType("int");

                    b.Property<Guid>("HeaderGuidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransStatusId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.HasKey("TenantId", "WorkFlowId", "CurrentTransId");

                    b.HasIndex("TransStatusId");

                    b.HasIndex("WorkFlowId");

                    b.HasIndex("TenantId", "WorkFlowId", "DocumentId");

                    b.ToTable("AdminWFTransList");
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminWFTransStatus", b =>
                {
                    b.Property<int>("TransStatusId")
                        .HasColumnType("int");

                    b.HasKey("TransStatusId");

                    b.ToTable("AdminWFTransStatus");
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminWfStepAction", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("StepId")
                        .HasColumnType("int");

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FunctionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("IsDisabled")
                        .HasColumnType("tinyint");

                    b.Property<byte>("IsTransPosted")
                        .HasColumnType("tinyint");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("TenantId", "StepId", "ActionId");

                    b.ToTable("AdminWfStepAction");
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvCustomer", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("CustId")
                        .HasColumnType("int");

                    b.Property<int>("BlockNo")
                        .HasColumnType("int");

                    b.Property<string>("BuildingNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustContactPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustEmail1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustFaxNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustFullAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustMobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustTelNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FlatNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("IsDisabled")
                        .HasColumnType("tinyint");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("StreetNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TownId")
                        .HasColumnType("int");

                    b.HasKey("TenantId", "CustId");

                    b.HasIndex("TenantId", "ProvinceId");

                    b.HasIndex("TenantId", "TownId");

                    b.ToTable("InvCustomer");

                    b.HasData(
                        new
                        {
                            TenantId = 1,
                            CustId = 1,
                            BlockNo = 1,
                            BuildingNo = "",
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 9, 21, 14, 32, 21, 342, DateTimeKind.Local).AddTicks(3876),
                            CustCode = "1",
                            CustContactPerson = "",
                            CustEmail1 = "",
                            CustFaxNo = "",
                            CustFullAddress = "",
                            CustMobileNo = "",
                            CustRef = "",
                            CustTelNo = "",
                            CustWebsite = "",
                            EditedBy = 1,
                            EditedDate = new DateTime(2020, 9, 21, 14, 32, 21, 342, DateTimeKind.Local).AddTicks(4758),
                            FlatNo = "",
                            IsDisabled = (byte)0,
                            NoteId = 0,
                            ProvinceId = 1,
                            StreetNo = "",
                            TownId = 1
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvItemCategory", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("CatId")
                        .HasColumnType("int");

                    b.Property<string>("CatCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("CatIsLeaf")
                        .HasColumnType("tinyint");

                    b.Property<int>("CatLevelId")
                        .HasColumnType("int");

                    b.Property<int>("CatLevelId1")
                        .HasColumnType("int");

                    b.Property<int>("CatLevelId2")
                        .HasColumnType("int");

                    b.Property<int>("CatLevelId3")
                        .HasColumnType("int");

                    b.Property<int>("CatLevelId4")
                        .HasColumnType("int");

                    b.Property<int>("CatLevelId5")
                        .HasColumnType("int");

                    b.Property<int>("CatLevelId6")
                        .HasColumnType("int");

                    b.Property<int?>("CatParentId")
                        .HasColumnType("int");

                    b.Property<string>("CatRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("TenantId", "CatId");

                    b.HasIndex("TenantId", "CatLevelId");

                    b.HasIndex("TenantId", "CatParentId");

                    b.ToTable("InvItemCategory");

                    b.HasData(
                        new
                        {
                            TenantId = 1,
                            CatId = 1,
                            CatCode = "1",
                            CatIsLeaf = (byte)0,
                            CatLevelId = 1,
                            CatLevelId1 = 1,
                            CatLevelId2 = 0,
                            CatLevelId3 = 0,
                            CatLevelId4 = 0,
                            CatLevelId5 = 0,
                            CatLevelId6 = 0,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 9, 21, 14, 32, 21, 343, DateTimeKind.Local).AddTicks(1136),
                            EditedBy = 1,
                            EditedDate = new DateTime(2020, 9, 21, 14, 32, 21, 343, DateTimeKind.Local).AddTicks(1834),
                            NoteId = 0
                        },
                        new
                        {
                            TenantId = 1,
                            CatId = 2,
                            CatCode = "2",
                            CatIsLeaf = (byte)1,
                            CatLevelId = 2,
                            CatLevelId1 = 1,
                            CatLevelId2 = 2,
                            CatLevelId3 = 0,
                            CatLevelId4 = 0,
                            CatLevelId5 = 0,
                            CatLevelId6 = 0,
                            CatParentId = 1,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 9, 21, 14, 32, 21, 343, DateTimeKind.Local).AddTicks(2961),
                            EditedBy = 1,
                            EditedDate = new DateTime(2020, 9, 21, 14, 32, 21, 343, DateTimeKind.Local).AddTicks(2980),
                            NoteId = 0
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvItemCategoryLevel", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("CatLevelId")
                        .HasColumnType("int");

                    b.Property<int>("CatCodeLength")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("datetime");

                    b.HasKey("TenantId", "CatLevelId");

                    b.ToTable("InvItemCategoryLevel");

                    b.HasData(
                        new
                        {
                            TenantId = 1,
                            CatLevelId = 1,
                            CatCodeLength = 1,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 9, 21, 14, 32, 21, 342, DateTimeKind.Local).AddTicks(7001),
                            EditedBy = 1,
                            EditedDate = new DateTime(2020, 9, 21, 14, 32, 21, 342, DateTimeKind.Local).AddTicks(7840)
                        },
                        new
                        {
                            TenantId = 1,
                            CatLevelId = 2,
                            CatCodeLength = 1,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 9, 21, 14, 32, 21, 342, DateTimeKind.Local).AddTicks(8244),
                            EditedBy = 1,
                            EditedDate = new DateTime(2020, 9, 21, 14, 32, 21, 342, DateTimeKind.Local).AddTicks(8260)
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvItemMaster", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("BaseToBigFactorCashed")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("BaseUnitIdCashed")
                        .HasColumnType("int");

                    b.Property<decimal>("BigToBaseFactorCashed")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("BigUnitIdCashed")
                        .HasColumnType("int");

                    b.Property<int>("CatId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("IsDisabled")
                        .HasColumnType("tinyint");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemCode1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemCode2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("TenantId", "ItemId");

                    b.HasIndex("TenantId", "CatId");

                    b.ToTable("InvItemMaster");

                    b.HasData(
                        new
                        {
                            TenantId = 1,
                            ItemId = 1,
                            BaseToBigFactorCashed = 0.08333m,
                            BaseUnitIdCashed = 1,
                            BigToBaseFactorCashed = 12m,
                            BigUnitIdCashed = 2,
                            CatId = 2,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 9, 21, 14, 32, 21, 343, DateTimeKind.Local).AddTicks(9303),
                            EditedBy = 1,
                            EditedDate = new DateTime(2020, 9, 21, 14, 32, 21, 344, DateTimeKind.Local).AddTicks(74),
                            IsDisabled = (byte)0,
                            ItemCode = "1001",
                            NoteId = 0
                        },
                        new
                        {
                            TenantId = 1,
                            ItemId = 2,
                            BaseToBigFactorCashed = 0.08333m,
                            BaseUnitIdCashed = 1,
                            BigToBaseFactorCashed = 12m,
                            BigUnitIdCashed = 2,
                            CatId = 2,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 9, 21, 14, 32, 21, 344, DateTimeKind.Local).AddTicks(572),
                            EditedBy = 1,
                            EditedDate = new DateTime(2020, 9, 21, 14, 32, 21, 344, DateTimeKind.Local).AddTicks(588),
                            IsDisabled = (byte)0,
                            ItemCode = "1002",
                            NoteId = 0
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvItemUnit", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("FactorToBaseUnit")
                        .HasColumnType("decimal(18,6)");

                    b.Property<byte>("IsBaseUnit")
                        .HasColumnType("tinyint");

                    b.Property<byte>("IsDisabled")
                        .HasColumnType("tinyint");

                    b.HasKey("TenantId", "ItemId", "UnitId");

                    b.HasIndex("TenantId", "UnitId");

                    b.ToTable("InvItemUnit");

                    b.HasData(
                        new
                        {
                            TenantId = 1,
                            ItemId = 1,
                            UnitId = 1,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 9, 21, 14, 32, 21, 344, DateTimeKind.Local).AddTicks(8369),
                            EditedBy = 1,
                            EditedDate = new DateTime(2020, 9, 21, 14, 32, 21, 344, DateTimeKind.Local).AddTicks(9181),
                            FactorToBaseUnit = 1m,
                            IsBaseUnit = (byte)1,
                            IsDisabled = (byte)0
                        },
                        new
                        {
                            TenantId = 1,
                            ItemId = 1,
                            UnitId = 2,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 9, 21, 14, 32, 21, 344, DateTimeKind.Local).AddTicks(9696),
                            EditedBy = 1,
                            EditedDate = new DateTime(2020, 9, 21, 14, 32, 21, 344, DateTimeKind.Local).AddTicks(9716),
                            FactorToBaseUnit = 12m,
                            IsBaseUnit = (byte)0,
                            IsDisabled = (byte)0
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvItemUnitBarcode", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Barcode")
                        .HasColumnType("nchar(30)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("TenantId", "Barcode");

                    b.HasIndex("TenantId", "ItemId", "UnitId");

                    b.ToTable("InvItemUnitBarcode");
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvItemUnitMatrix", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("UnitIdFrom")
                        .HasColumnType("int");

                    b.Property<int>("UnitIdTo")
                        .HasColumnType("int");

                    b.Property<decimal>("Factor")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("TenantId", "ItemId", "UnitIdFrom", "UnitIdTo");

                    b.HasIndex("TenantId", "ItemId", "UnitIdTo");

                    b.ToTable("InvItemUnitMatrix");

                    b.HasData(
                        new
                        {
                            TenantId = 1,
                            ItemId = 1,
                            UnitIdFrom = 1,
                            UnitIdTo = 2,
                            Factor = 0.08333m
                        },
                        new
                        {
                            TenantId = 1,
                            ItemId = 1,
                            UnitIdFrom = 2,
                            UnitIdTo = 1,
                            Factor = 12m
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvItemUnitOfMeasurement", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UnitArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitEnglishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TenantId", "UnitId");

                    b.ToTable("InvItemUnitOfMeasurement");

                    b.HasData(
                        new
                        {
                            TenantId = 1,
                            UnitId = 1,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 9, 21, 14, 32, 21, 344, DateTimeKind.Local).AddTicks(3477),
                            EditedBy = 1,
                            EditedDate = new DateTime(2020, 9, 21, 14, 32, 21, 344, DateTimeKind.Local).AddTicks(4579),
                            UnitArabicName = "PC",
                            UnitCode = "PC",
                            UnitEnglishName = "PC"
                        },
                        new
                        {
                            TenantId = 1,
                            UnitId = 2,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 9, 21, 14, 32, 21, 344, DateTimeKind.Local).AddTicks(5008),
                            EditedBy = 1,
                            EditedDate = new DateTime(2020, 9, 21, 14, 32, 21, 344, DateTimeKind.Local).AddTicks(5030),
                            UnitArabicName = "Packet",
                            UnitCode = "Packet",
                            UnitEnglishName = "Packet"
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvLocation", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LocationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("LocationIsLeaf")
                        .HasColumnType("tinyint");

                    b.Property<int>("LocationLevelId")
                        .HasColumnType("int");

                    b.Property<int>("LocationLevelId1")
                        .HasColumnType("int");

                    b.Property<int>("LocationLevelId2")
                        .HasColumnType("int");

                    b.Property<int>("LocationLevelId3")
                        .HasColumnType("int");

                    b.Property<int>("LocationLevelId4")
                        .HasColumnType("int");

                    b.Property<int>("LocationLevelId5")
                        .HasColumnType("int");

                    b.Property<int>("LocationLevelId6")
                        .HasColumnType("int");

                    b.Property<int?>("LocationParentId")
                        .HasColumnType("int");

                    b.Property<string>("LocationRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.Property<int?>("PriceListId")
                        .HasColumnType("int");

                    b.HasKey("TenantId", "LocationId");

                    b.HasIndex("TenantId", "LocationLevelId");

                    b.HasIndex("TenantId", "LocationParentId");

                    b.HasIndex("TenantId", "PriceListId");

                    b.ToTable("InvLocation");

                    b.HasData(
                        new
                        {
                            TenantId = 1,
                            LocationId = 1,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 9, 21, 14, 32, 21, 345, DateTimeKind.Local).AddTicks(9947),
                            EditedBy = 1,
                            EditedDate = new DateTime(2020, 9, 21, 14, 32, 21, 346, DateTimeKind.Local).AddTicks(751),
                            LocationCode = "1",
                            LocationIsLeaf = (byte)0,
                            LocationLevelId = 1,
                            LocationLevelId1 = 1,
                            LocationLevelId2 = 0,
                            LocationLevelId3 = 0,
                            LocationLevelId4 = 0,
                            LocationLevelId5 = 0,
                            LocationLevelId6 = 0,
                            NoteId = 0
                        },
                        new
                        {
                            TenantId = 1,
                            LocationId = 2,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 9, 21, 14, 32, 21, 346, DateTimeKind.Local).AddTicks(1605),
                            EditedBy = 1,
                            EditedDate = new DateTime(2020, 9, 21, 14, 32, 21, 346, DateTimeKind.Local).AddTicks(1625),
                            LocationCode = "2",
                            LocationIsLeaf = (byte)1,
                            LocationLevelId = 2,
                            LocationLevelId1 = 1,
                            LocationLevelId2 = 2,
                            LocationLevelId3 = 0,
                            LocationLevelId4 = 0,
                            LocationLevelId5 = 0,
                            LocationLevelId6 = 0,
                            NoteId = 0
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvLocationLevel", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("LocationLevelId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("LocationCodeLength")
                        .HasColumnType("int");

                    b.HasKey("TenantId", "LocationLevelId");

                    b.ToTable("InvLocationLevel");

                    b.HasData(
                        new
                        {
                            TenantId = 1,
                            LocationLevelId = 1,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 9, 21, 14, 32, 21, 345, DateTimeKind.Local).AddTicks(5009),
                            EditedBy = 1,
                            EditedDate = new DateTime(2020, 9, 21, 14, 32, 21, 345, DateTimeKind.Local).AddTicks(5838),
                            LocationCodeLength = 1
                        },
                        new
                        {
                            TenantId = 1,
                            LocationLevelId = 2,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 9, 21, 14, 32, 21, 345, DateTimeKind.Local).AddTicks(6315),
                            EditedBy = 1,
                            EditedDate = new DateTime(2020, 9, 21, 14, 32, 21, 345, DateTimeKind.Local).AddTicks(6337),
                            LocationCodeLength = 1
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSReturnDetails", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("ReturnInvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("DetailsId")
                        .HasColumnType("int");

                    b.Property<Guid>("DetailsGuidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("TenantId", "ReturnInvoiceId", "DetailsId");

                    b.HasIndex("TenantId", "ItemId", "UnitId");

                    b.ToTable("InvPOSReturnDetails");
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSReturnHeader", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int?>("ReturnInvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CustId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("EditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("HeaderGuidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InvoiceIdRefernce")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.Property<int>("POSReturnTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ReturnInvoiceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReturnInvoiceDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TerminalId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("TransStatusId")
                        .HasColumnType("int");

                    b.Property<int>("WorkFlowId")
                        .HasColumnType("int");

                    b.HasKey("TenantId", "ReturnInvoiceId");

                    b.HasIndex("POSReturnTypeId");

                    b.HasIndex("WorkFlowId");

                    b.HasIndex("TenantId", "CustId");

                    b.HasIndex("TenantId", "InvoiceIdRefernce");

                    b.HasIndex("TenantId", "LocationId");

                    b.HasIndex("TenantId", "TerminalId");

                    b.HasIndex("TenantId", "WorkFlowId", "DocumentId");

                    b.ToTable("InvPOSReturnHeader");
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSReturnType", b =>
                {
                    b.Property<int>("InvPOSReturnTypeId")
                        .HasColumnType("int");

                    b.HasKey("InvPOSReturnTypeId");

                    b.ToTable("InvPOSReturnType");
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSSalesDetails", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("DetailsId")
                        .HasColumnType("int");

                    b.Property<Guid>("DetailsGuidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("TenantId", "InvoiceId", "DetailsId");

                    b.HasIndex("TenantId", "ItemId", "UnitId");

                    b.ToTable("InvPOSSalesDetails");
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSSalesHeader", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CustId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("EditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("HeaderGuidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InvPOSSalesTypeId")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.Property<int>("TerminalId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("TransStatusId")
                        .HasColumnType("int");

                    b.Property<int>("WorkFlowId")
                        .HasColumnType("int");

                    b.HasKey("TenantId", "InvoiceId");

                    b.HasIndex("InvPOSSalesTypeId");

                    b.HasIndex("WorkFlowId");

                    b.HasIndex("TenantId", "CustId");

                    b.HasIndex("TenantId", "LocationId");

                    b.HasIndex("TenantId", "TerminalId");

                    b.HasIndex("TenantId", "WorkFlowId", "DocumentId");

                    b.ToTable("InvPOSSalesHeader");
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSSalesPayment", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("ReturnVoucherRetId")
                        .HasColumnType("int");

                    b.HasKey("TenantId", "InvoiceId", "PaymentMethodId");

                    b.HasIndex("TenantId", "PaymentMethodId");

                    b.HasIndex("TenantId", "ReturnVoucherRetId");

                    b.ToTable("InvPOSSalesPayment");
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSSalesPaymentMethod", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("IsDisabled")
                        .HasColumnType("tinyint");

                    b.Property<byte>("IsKeyNet")
                        .HasColumnType("tinyint");

                    b.Property<byte>("IsMasterCard")
                        .HasColumnType("tinyint");

                    b.Property<byte>("IsVoucher")
                        .HasColumnType("tinyint");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethodCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethodRef")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TenantId", "PaymentMethodId");

                    b.ToTable("InvPOSSalesPaymentMethod");
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSSalesType", b =>
                {
                    b.Property<int>("InvPOSSalesTypeId")
                        .HasColumnType("int");

                    b.HasKey("InvPOSSalesTypeId");

                    b.ToTable("InvPOSSalesType");

                    b.HasData(
                        new
                        {
                            InvPOSSalesTypeId = 1
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSTerminal", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("TerminalId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.Property<string>("TerminalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TerminalRef")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TenantId", "TerminalId");

                    b.HasIndex("TenantId", "LocationId");

                    b.ToTable("InvPOSTerminal");

                    b.HasData(
                        new
                        {
                            TenantId = 1,
                            TerminalId = 1,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 9, 21, 14, 32, 21, 346, DateTimeKind.Local).AddTicks(4308),
                            EditedBy = 1,
                            EditedDate = new DateTime(2020, 9, 21, 14, 32, 21, 346, DateTimeKind.Local).AddTicks(5112),
                            LocationId = 2,
                            NoteId = 0,
                            TerminalCode = "101"
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSZread", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("ZreadId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("EditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("HeaderGuidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InvoiceIdFrom")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceIdTo")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.Property<int>("ReturnInvoiceIdFrom")
                        .HasColumnType("int");

                    b.Property<int>("ReturnInvoiceIdTo")
                        .HasColumnType("int");

                    b.Property<decimal>("ReturnNetAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("TerminalId")
                        .HasColumnType("int");

                    b.Property<int>("TransStatusId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WorkFlowId")
                        .HasColumnType("int");

                    b.Property<string>("ZreadCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ZreadDate")
                        .HasColumnType("datetime");

                    b.HasKey("TenantId", "ZreadId");

                    b.HasIndex("WorkFlowId");

                    b.HasIndex("TenantId", "LocationId");

                    b.HasIndex("TenantId", "TerminalId");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "WorkFlowId", "DocumentId");

                    b.ToTable("InvPOSZread");
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSZreadDetails", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("ZreadId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("TenantId", "ZreadId", "PaymentMethodId");

                    b.HasIndex("TenantId", "PaymentMethodId");

                    b.ToTable("InvPOSZreadDetails");
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPriceDetails", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("PriceListId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("TenantId", "PriceListId", "ItemId", "UnitId");

                    b.HasIndex("TenantId", "ItemId", "UnitId");

                    b.ToTable("InvPriceDetails");

                    b.HasData(
                        new
                        {
                            TenantId = 1,
                            PriceListId = 1,
                            ItemId = 1,
                            UnitId = 1,
                            Price = 10m
                        },
                        new
                        {
                            TenantId = 1,
                            PriceListId = 1,
                            ItemId = 1,
                            UnitId = 2,
                            Price = 120m
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPriceHeader", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("PriceListId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.Property<string>("PriceListCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriceListRef")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TenantId", "PriceListId");

                    b.ToTable("InvPriceHeader");

                    b.HasData(
                        new
                        {
                            TenantId = 1,
                            PriceListId = 1,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 9, 21, 14, 32, 21, 346, DateTimeKind.Local).AddTicks(7801),
                            EditedBy = 1,
                            EditedDate = new DateTime(2020, 9, 21, 14, 32, 21, 346, DateTimeKind.Local).AddTicks(8548),
                            NoteId = 0,
                            PriceListCode = "1"
                        });
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminActor", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("Actors")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminChart", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("Charts")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminChartLevel", null)
                        .WithMany("Charts")
                        .HasForeignKey("TenantId", "ChartLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminChart", null)
                        .WithMany("Charts")
                        .HasForeignKey("TenantId", "ChartParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminChartLevel", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("ChartLevels")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminCoding", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("Codings")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminWFMaster", null)
                        .WithMany("Codings")
                        .HasForeignKey("WorkFlowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminWFDocument", null)
                        .WithMany("Codings")
                        .HasForeignKey("TenantId", "WorkFlowId", "DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminCountry", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminCurrency", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("Currencies")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminModuleScreen", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminModule", null)
                        .WithMany("ModuleScreens")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminScreen", null)
                        .WithMany("ModuleScreens")
                        .HasForeignKey("ScreenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminNationality", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("Nationalities")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminNotes", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("Notes")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminObjectLanguage", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminLanguage", null)
                        .WithMany("ObjectLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminObject", null)
                        .WithMany("ObjectLanguages")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("ObjectLanguages")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminPackageModule", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminModule", null)
                        .WithMany("PackageModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminPackage", null)
                        .WithMany("PackageModules")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminProvince", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminCountry", null)
                        .WithMany("Provinces")
                        .HasForeignKey("TenantId", "CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminScreen", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminRight", null)
                        .WithMany("Screens")
                        .HasForeignKey("RightId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminScreenLevel", null)
                        .WithMany("Screens")
                        .HasForeignKey("ScreenLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminScreen", null)
                        .WithMany("Screens")
                        .HasForeignKey("ScreenParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminScreenLanguage", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminLanguage", null)
                        .WithMany("ScreenLanguage")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminScreen", null)
                        .WithMany("ScreenLanguage")
                        .HasForeignKey("ScreenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenantLanguage", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminLanguage", null)
                        .WithMany("TenantLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("TenantLanguages")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenantPackage", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminPackage", null)
                        .WithMany("TenantPackage")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("TenantPackages")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTown", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminProvince", null)
                        .WithMany("Towns")
                        .HasForeignKey("TenantId", "ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminUser", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminChart", null)
                        .WithMany("Users")
                        .HasForeignKey("TenantId", "ChartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminWFDocument", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("WFDocuments")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminWFMaster", null)
                        .WithMany("WFDocuments")
                        .HasForeignKey("WorkFlowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminWFMaster", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminModule", null)
                        .WithMany("WFMasters")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminScreen", null)
                        .WithMany("WFMasters")
                        .HasForeignKey("ScreenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminWFProcess", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminWFStepStatus", null)
                        .WithMany("WFProcesses")
                        .HasForeignKey("StepStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("WFProcesses")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminWFStep", null)
                        .WithMany("WFProcesses")
                        .HasForeignKey("TenantId", "StepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminWFStep", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("WFSteps")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminWFMaster", null)
                        .WithMany("WFSteps")
                        .HasForeignKey("WorkFlowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminActor", null)
                        .WithMany("WFSteps")
                        .HasForeignKey("TenantId", "ActorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminWFStep", null)
                        .WithMany("WFSteps")
                        .HasForeignKey("TenantId", "NextStepId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminWFDocument", null)
                        .WithMany("WFSteps")
                        .HasForeignKey("TenantId", "WorkFlowId", "DocumentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminWFTransList", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("WFTRansList")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminWFTransStatus", null)
                        .WithMany("WFTransList")
                        .HasForeignKey("TransStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminWFMaster", null)
                        .WithMany("WFTransList")
                        .HasForeignKey("WorkFlowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminWFDocument", null)
                        .WithMany("WFTransList")
                        .HasForeignKey("TenantId", "WorkFlowId", "DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Admin.BE.AdminWfStepAction", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("WFStepAction")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminWFStep", null)
                        .WithMany("WFStepAction")
                        .HasForeignKey("TenantId", "StepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvCustomer", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("Customers")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminProvince", null)
                        .WithMany("Customers")
                        .HasForeignKey("TenantId", "ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTown", null)
                        .WithMany("Customers")
                        .HasForeignKey("TenantId", "TownId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvItemCategory", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("ItemCategories")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvItemCategoryLevel", null)
                        .WithMany("ItemCategories")
                        .HasForeignKey("TenantId", "CatLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvItemCategory", null)
                        .WithMany("ItemCategories")
                        .HasForeignKey("TenantId", "CatParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvItemCategoryLevel", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("ItemCategoryLevels")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvItemMaster", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("ItemMasters")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvItemCategory", null)
                        .WithMany("ItemMasters")
                        .HasForeignKey("TenantId", "CatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvItemUnit", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("ItemUnits")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvItemMaster", null)
                        .WithMany("ItemUnits")
                        .HasForeignKey("TenantId", "ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvItemUnitOfMeasurement", null)
                        .WithMany("ItemUnits")
                        .HasForeignKey("TenantId", "UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvItemUnitBarcode", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("ItemUnitBarcodes")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvItemUnit", null)
                        .WithMany("ItemUnitBarcodes")
                        .HasForeignKey("TenantId", "ItemId", "UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvItemUnitMatrix", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("ItemUnitMaxtrixes")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvItemUnit", null)
                        .WithMany("ItemUnitMatrixesFrom")
                        .HasForeignKey("TenantId", "ItemId", "UnitIdFrom")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvItemUnit", null)
                        .WithMany("ItemUnitMatrixesTo")
                        .HasForeignKey("TenantId", "ItemId", "UnitIdTo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvItemUnitOfMeasurement", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("ItemUnitOfMeasures")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvLocation", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("Locations")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvLocationLevel", null)
                        .WithMany("Locations")
                        .HasForeignKey("TenantId", "LocationLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvLocation", null)
                        .WithMany("Locations")
                        .HasForeignKey("TenantId", "LocationParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPriceHeader", null)
                        .WithMany("Locations")
                        .HasForeignKey("TenantId", "PriceListId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvLocationLevel", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("LocationLevels")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSReturnDetails", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("POSReturnDetails")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSReturnHeader", null)
                        .WithMany("POSReturnDetails")
                        .HasForeignKey("TenantId", "ReturnInvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvItemUnit", null)
                        .WithMany("POSReturnDetails")
                        .HasForeignKey("TenantId", "ItemId", "UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSReturnHeader", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSReturnType", null)
                        .WithMany("POSReturnHeaders")
                        .HasForeignKey("POSReturnTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("POSReturnHeaders")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminWFMaster", null)
                        .WithMany("POSReturnHeaders")
                        .HasForeignKey("WorkFlowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvCustomer", null)
                        .WithMany("POSReturnHeaders")
                        .HasForeignKey("TenantId", "CustId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSSalesHeader", null)
                        .WithMany("POSReturnHeaders")
                        .HasForeignKey("TenantId", "InvoiceIdRefernce")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvLocation", null)
                        .WithMany("POSReturnHeaders")
                        .HasForeignKey("TenantId", "LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSTerminal", null)
                        .WithMany("POSReturnHeaders")
                        .HasForeignKey("TenantId", "TerminalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminWFDocument", null)
                        .WithMany("POSReturnHeaders")
                        .HasForeignKey("TenantId", "WorkFlowId", "DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSSalesDetails", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("POSSalesDetails")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSSalesHeader", null)
                        .WithMany("POSSalesDetails")
                        .HasForeignKey("TenantId", "InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvItemUnit", null)
                        .WithMany("POSSalesDetails")
                        .HasForeignKey("TenantId", "ItemId", "UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSSalesHeader", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSSalesType", null)
                        .WithMany("POSSalesHeaders")
                        .HasForeignKey("InvPOSSalesTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("POSSalesHeaders")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminWFMaster", null)
                        .WithMany("POSSalesHeaders")
                        .HasForeignKey("WorkFlowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvCustomer", null)
                        .WithMany("POSSalesHeaders")
                        .HasForeignKey("TenantId", "CustId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvLocation", null)
                        .WithMany("POSSalesHeaders")
                        .HasForeignKey("TenantId", "LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSTerminal", null)
                        .WithMany("POSSalesHeaders")
                        .HasForeignKey("TenantId", "TerminalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminWFDocument", null)
                        .WithMany("POSSalesHeaders")
                        .HasForeignKey("TenantId", "WorkFlowId", "DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSSalesPayment", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("POSSalesPayments")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSSalesHeader", null)
                        .WithMany("POSSalesPayments")
                        .HasForeignKey("TenantId", "InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSSalesPaymentMethod", null)
                        .WithMany("POSSalesPayments")
                        .HasForeignKey("TenantId", "PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSReturnHeader", null)
                        .WithMany("POSSalesPayments")
                        .HasForeignKey("TenantId", "ReturnVoucherRetId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSSalesPaymentMethod", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("POSSalesPaymentMethods")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSTerminal", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("POSTerminals")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvLocation", null)
                        .WithMany("POSTerminals")
                        .HasForeignKey("TenantId", "LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSZread", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("POSZreads")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminWFMaster", null)
                        .WithMany("POSZreads")
                        .HasForeignKey("WorkFlowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvLocation", null)
                        .WithMany("POSZreads")
                        .HasForeignKey("TenantId", "LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSTerminal", null)
                        .WithMany("POSZreads")
                        .HasForeignKey("TenantId", "TerminalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminUser", null)
                        .WithMany("POSZreads")
                        .HasForeignKey("TenantId", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminWFDocument", null)
                        .WithMany("POSZreads")
                        .HasForeignKey("TenantId", "WorkFlowId", "DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSZreadDetails", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("POSZreadDetails")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSSalesPaymentMethod", null)
                        .WithMany("POSZreadDetails")
                        .HasForeignKey("TenantId", "PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPOSZread", null)
                        .WithMany("POSZreadDetails")
                        .HasForeignKey("TenantId", "ZreadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPriceDetails", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("PriceDetails")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPriceHeader", null)
                        .WithMany("PriceDetails")
                        .HasForeignKey("TenantId", "PriceListId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MLERPSuiteBuss.Data.Models.Inventory.BE.InvItemUnit", null)
                        .WithMany("PriceDetails")
                        .HasForeignKey("TenantId", "ItemId", "UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MLERPSuiteBuss.Data.Models.Inventory.BE.InvPriceHeader", b =>
                {
                    b.HasOne("MLERPSuiteBuss.Data.Models.Admin.BE.AdminTenant", "Tenant")
                        .WithMany("PriceHeaders")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
